@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using f_client.Data.Request
@using f_client.Data.Response
@inject HttpClient Http

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="validation-message">@errorMessage</div>
}
else if (!string.IsNullOrEmpty(infoMessage))
{
    <div class="validation-message">@infoMessage</div>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <div class="input-group">
            <InputText id="password"
                       class="form-control"
                       type="@passwordInputType"
                       @bind-Value="loginModel.Password" />
            <button type="button"
                    class="btn btn-outline-secondary"
                    title="Show password"
                    @onclick="TogglePasswordVisibility"
                    tabindex="-1">
                @(showPassword ? "Hide" : "Show")
            </button>
        </div>
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>



    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    [Parameter] public EventCallback<string> OnLoginError { get; set; }
    [Parameter] public EventCallback<UserAuthResponse> OnLoginSuccess { get; set; }
    [Parameter] public EventCallback<UserAuthResponse> OnRequiresTwoFactor { get; set; }

    private LoginModel loginModel = new();
    private string? errorMessage;
    private string? infoMessage;
    private bool showPassword = false;

    private string passwordInputType => showPassword ? "text" : "password";

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = null;
        infoMessage = null;

        try
        {
            var request = new UserAuthRequest
            {
                Email = loginModel.Email,
                Password = loginModel.Password
            };

            using var response = await Http.PostAsJsonAsync("api/users/auth/login", request);

            if (!response.IsSuccessStatusCode)
            {
                var serverError = await response.Content.ReadAsStringAsync();
                try
                {
                    var problem = JsonSerializer.Deserialize<ProblemDetails>(
                        serverError,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                    errorMessage = problem!.Detail ?? problem.Title;
                }
                catch
                {
                    errorMessage = "Server error";
                }
                await OnLoginError.InvokeAsync(errorMessage);
                return;
            }

            var authResponse = await response.Content.ReadFromJsonAsync<UserAuthResponse>();
            if (authResponse == null)
            {
                const string parseError = "Invalid or empty response from server.";
                errorMessage = parseError;
                await OnLoginError.InvokeAsync(parseError);
                return;
            }

            if (authResponse.RequiresTwoFactor)
            {
                infoMessage = authResponse.Message ?? "Two-factor required.";
                await OnRequiresTwoFactor.InvokeAsync(authResponse);
            }
            else
            {
                await OnLoginSuccess.InvokeAsync(authResponse);
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            await OnLoginError.InvokeAsync(ex.Message);
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Not a valid email address")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string? Password { get; set; }
    }

    public class ProblemDetails
    {
        public string? Title { get; set; }
        public string? Detail { get; set; }
    }
}