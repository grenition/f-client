@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using f_client.Data.Common
@using f_client.Data.Response
@inject HttpClient Http
@inject NavigationManager Navigation

<EditForm Model="@registerModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (!string.IsNullOrEmpty(errorMessage))
    {
    <div class="validation-message">@errorMessage</div>
    }
    else if (!string.IsNullOrEmpty(infoMessage))
    {
    <div>@infoMessage</div>
    }

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <div class="input-group">
            <InputText id="password"
                       class="form-control"
                       type="@passwordInputType"
                       @bind-Value="registerModel.Password" />
            <button type="button"
                    class="btn btn-outline-secondary"
                    title="Show password"
                    @onclick="TogglePasswordVisibility"
                    tabindex="-1">
                @(showPassword ? "Hide" : "Show")
            </button>
        </div>
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>

    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirm Password</label>
        <div class="input-group">
            <InputText id="confirmPassword"
                       class="form-control"
                       type="@confirmPasswordInputType"
                       @bind-Value="registerModel.ConfirmPassword" />
            <button type="button"
                    class="btn btn-outline-secondary"
                    title="Show confirm password"
                    @onclick="ToggleConfirmPasswordVisibility"
                    tabindex="-1">
                @(showConfirmPassword ? "Hide" : "Show")
            </button>
        </div>
        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
    </div>


    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    [Parameter] public EventCallback<string> OnRegisterError { get; set; }
    [Parameter] public EventCallback<UserRegisterResponse> OnRegisterSuccess { get; set; }

    private RegisterModel registerModel = new();
    private string? errorMessage;
    private string? infoMessage;

    private bool showPassword = false;
    private bool showConfirmPassword = false;

    private string passwordInputType => showPassword ? "text" : "password";
    private string confirmPasswordInputType => showConfirmPassword ? "text" : "password";

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
    }


    private async Task HandleValidSubmit()
    {
        errorMessage = null;
        infoMessage = null;

        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        try
        {
            var request = new
            {
                email = registerModel.Email,
                password = registerModel.Password,
                baseUrl = Navigation.BaseUri.TrimEnd('/')
            };

            using var response = await Http.PostAsJsonAsync("api/users/auth/register", request);

            if (!response.IsSuccessStatusCode)
            {
                var serverError = await response.Content.ReadAsStringAsync();
                try
                {
                    var problem = JsonSerializer.Deserialize<ProblemDetails>(
                        serverError,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    errorMessage = problem?.Detail ?? problem?.Title ?? "Registration failed.";
                }
                catch
                {
                    errorMessage = "Server error.";
                }
                await OnRegisterError.InvokeAsync(errorMessage);
                return;
            }

            var success = await response.Content.ReadFromJsonAsync<UserRegisterResponse>();
            if (success == null)
            {
                errorMessage = "Invalid or empty response from server.";
                await OnRegisterError.InvokeAsync(errorMessage);
                return;
            }

            infoMessage = success.Message ?? "Registration successful!";
            await OnRegisterSuccess.InvokeAsync(success);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            await OnRegisterError.InvokeAsync(ex.Message);
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Not a valid email address")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string? Password { get; set; }

        [Required(ErrorMessage = "Confirmation Password is required")]
        [MinLength(6, ErrorMessage = "Confirmation Password must be at least 6 characters")]
        public string? ConfirmPassword { get; set; }
    }
}
