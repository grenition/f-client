@using f_client.Data.Response

@if (isRegistering)
{
    <h1>Registration</h1>

    <RegisterBlock OnRegisterError="HandleRegisterError"
                   OnRegisterSuccess="HandleRegisterSuccess"/>
}
else if (registered)
{
    <h1>Confirm your email</h1>
    <div class="alert alert-info text-center">
        Weâ€™ve sent a confirmation link to your email.<br/>
        Please check your inbox and confirm your account to continue.
    </div>
}
else if (emailNotConfirmed)
{
    <h1>Email not confirmed</h1>
    <div class="alert alert-warning text-center">
        Unable to authenticate user, please confirm email.
    </div>
}
else if (requiresTwoFactor)
{
    <h1>Log in</h1>

    <TwoFactorLoginBlock Token="@twoFactorToken"
                         OnTwoFactorError="HandleError"
                         OnTwoFactorSuccess="HandleSuccess"/>
}
else
{
    <h1>Log in</h1>

    <LoginBlock OnLoginError="HandleError"
                OnLoginSuccess="HandleLoginSuccess"
                OnRequiresTwoFactor="HandleRequiresTwoFactor"
                OnLoginErrorEmailNotConfirmed="HandleEmailNotConfirmedError"/>
}

<div class="mt-3 text-center">
    @if (!isRegistering && emailNotConfirmed)
    {
        <div class="d-flex justify-content-center gap-3">
            <span class="auth-link" @onclick="ShowRegister">Need an account? Register</span>
            <span class="auth-link" @onclick="ShowLogin">Already have an account? Login</span>
        </div>
    }
    else if (!isRegistering && !registered)
    {
        <span class="auth-link" @onclick="ShowRegister">Need an account? Register</span>
    }
    else if (isRegistering)
    {
        <span class="auth-link" @onclick="ShowLogin">Already have an account? Login</span>
    }
</div>

@code {
    [Parameter] public EventCallback<string> OnError { get; set; }
    [Parameter] public EventCallback<UserAuthResponse> OnSuccess { get; set; }

    private bool requiresTwoFactor;
    private bool emailNotConfirmed;
    private bool isRegistering;
    private bool registered;
    private string? twoFactorToken;

    private Task HandleEmailNotConfirmedError()
    {
        emailNotConfirmed = true;
        return Task.CompletedTask;
    }

    private async Task HandleError(string error)
    {
        await OnError.InvokeAsync(error);
    }

    private void HandleRequiresTwoFactor(UserAuthResponse response)
    {
        requiresTwoFactor = true;
        twoFactorToken = response.Token;
    }

    private async Task HandleLoginSuccess(UserAuthResponse response)
    {
        await OnSuccess.InvokeAsync(response);
    }

    private async Task HandleSuccess(UserAuthResponse response)
    {
        await OnSuccess.InvokeAsync(response);
    }

    private async Task HandleRegisterError(string error)
    {
        await HandleError(error);
    }

    private Task HandleRegisterSuccess(UserRegisterResponse response)
    {
        isRegistering = false;
        registered = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void ShowRegister()
    {
        isRegistering = true;
        emailNotConfirmed = false;
        registered = false;
    }

    private void ShowLogin()
    {
        isRegistering = false;
        emailNotConfirmed = false;
        registered = false;
    }
}